services:
  # Next.js Frontend Development
  frontend-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile.nextjs.dev
    ports:
      - "3000:3000"
    volumes:
      - ..:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
    command: npm run dev
    depends_on:
      - backend

  # Next.js Frontend Production
  frontend-prod:
    build:
      context: ..
      dockerfile: docker/Dockerfile.nextjs
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend

  # Django Backend
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.django
    ports:
      - "8000:8000"
    volumes:
      - ../env/incubator:/app
    environment:
      - DEBUG=1
      - DJANGO_SETTINGS_MODULE=incubator.settings
      - POSTGRES_DB=jeb
      - POSTGRES_USER=merchex_user
      - POSTGRES_PASSWORD=merchex_pass
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    # Attend que Postgres soit marqué healthy (grâce au healthcheck défini sur le service db)
    depends_on:
      db:
        condition: service_healthy

  # PostgreSQL Database (optional)
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=jeb
      - POSTGRES_USER=merchex_user
      - POSTGRES_PASSWORD=merchex_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5433:5433"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U merchex_user -d jeb"]
      interval: 5s
      timeout: 3s
      retries: 12


volumes:
  postgres_data:

networks:
  default:
    name: survivor-network
